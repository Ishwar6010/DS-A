/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*>mpp;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* p=q.front();
            q.pop();
            if(p->left)
            {
                mpp[p->left]=p;
                q.push(p->left);
            }
            if(p->right)
            {
                mpp[p->right]=p;
                q.push(p->right);
            }
        }
        q.push(target);
        unordered_map<TreeNode*,bool>visited;
        int level=0;
        //visited[target]=true;
        while(!q.empty())
        {
            int n=q.size();
            if(level++==k)
                break;
            for(int i=0;i<n;i++)
            {
                TreeNode* p=q.front();
                q.pop();
                visited[p]=true;
                if(p->left&&!visited[p->left])
                {
                    q.push(p->left);
                    visited[p->left]=true;
                }
                if(p->right&&!visited[p->right])
                {
                    q.push(p->right);
                    visited[p->right]=true;
                }
                if(mpp[p]&&!visited[mpp[p]])
                {
                    q.push(mpp[p]);
                    visited[mpp[p]]=true;
                }
            }
        }
        vector<int>res;
        while(!q.empty())
        {
            res.push_back(q.front()->val);
            q.pop();
        }
        return res;
    }
};
